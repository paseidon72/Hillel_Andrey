# Написать программу для поиска файлов и построкового сравнения двух файлов.
# 1. Если код запустить с 2 аргументами, то каждым аргументом должно быть либо
# название файла, либо название файла с путём к нему, например:
# python example.py test1.txt c:\temp\test2.txt
# Данный вызов построково сравнивает текстовый файл test1.txt, который
# находится по тому же пути, что и запускаемый скрипт с текстовым файлом
# test2.txt который находится по пути: c:\temp\
# 2. Код можно запустить с ключами -f, -t и -d.
# а) Если код запускается с ключём -f то после него указывается шаблоном по
# которому в текущей директории и во всех поддиректориях будут искаться файлы.
# При этом если в имени использовать знак * - это означает любое количество любых
# символов, а знак ? - любой один символ. Пример:
# python example.py -f "*.txt"
# Данный вызов находит все файлы с расширением txt в текущей директории и всех
# поддиреториях.
# б) Скрипт можно запустить одновременно с ключом -f и ключом -t с любым текстом
# после него (если текст отделён пробелами, то его необходимо брать в кавычки).
# В этом случае будут найдены только те файлы которые соответствуют шаблону
# поиска, а так же в этих файлах должен быть указанный текст. Пример:
# python example.py -f "*.txt" -t "искомый текст"
# Данный вызов находит все файлы с расширением txt в текущей директории в которых
# есть текст "искомый текст".
# в) Так же скрипт можно запустить одновременно с ключом -f и ключом -d, после
# которого необходимо указать путь директории в которой будет осуществляться поиск
# файлов по заданному шаблону, а так же во всех её поддиректориях. Пример:
# python example.py -f "*.txt" -d "c:\user\main"
# В этом случае файлы по шаблону *.txt будут искаться в директории по пути
# c:\user\main, а так же по всех её поддиректориях.
# Если после ключа -d указать знак "/", то поиск по заданному файлов шаблону
# будет осуществляться только в текущей диретории. Пример:
# python example.py -f "*.txt" -d \
# Таким образом значение ключ -f всегда обязателен для поиска, а вот ключи -t и -d,
# при этом они могут использоваться как по одному, так и вместе в одном запросе:
# python example.py -f "*.txt" -t "искомый текст" -d \
# Чтение ключей необходимо сделать при помощи библиотеки (argparse).
# Описание библиотеки os:
# https://pythonworld.ru/moduli/modul-os.html
# https://pythonworld.ru/moduli/modul-os-path.html


import argparse


def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', metavar='--text', type=str, help='Needed text in file')
    parser.add_argument('-f', metavar='--file', type=str, help='Pattern of finding file')
    parser.add_argument('-d', metavar='--directory', type=str, help='Start directory to find')

    return parser.parse_args()


parser = create_parser()
print('parser.t:', parser.t)
print('parser.f:', parser.f)
print('parser.d:', parser.d)